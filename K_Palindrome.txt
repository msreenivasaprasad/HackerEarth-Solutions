import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;

public class K_Palindrome {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int cases = Integer.parseInt(br.readLine());
		for (int i = 0; i < cases; i++) {
			String s = br.readLine();
			char[] c = s.toCharArray();
			int k = Integer.parseInt(br.readLine());
			if (s.length() % 2 == 0 && k % 2 != 0) {
				System.out.println(-1);
				continue;
			}
			if (s.length() % 2 != 0 && k % 2 == 0) {
				System.out.println(-1);
				continue;
			}
//			if (s.length() % 2 == 0 && k > s.length() / 2) {
//				System.out.println(-1);
//				continue;
//			}
//			if (s.length() % 2 != 0 && k > (s.length() / 2) + 1) {
//				System.out.println(-1);
//				continue;
//			}
			// System.out.println(s.length());
			int[] steps = new int[s.length() / 2];
			int t = 0;

			for (int j = 0; j < c.length / 2; j++) {
				steps[t++] = Math.abs(c[j] - c[c.length - 1 - j]);
			}
			Arrays.sort(steps);
			int res = 0;

			k = k / 2;
			int j;
			for (j = 0; j < k; j++) {
				res += steps[j];
			}
			while (j < steps.length && steps[j] == 0) {
				res++;
				j++;
			}
			System.out.println(res);
		}
	}


}