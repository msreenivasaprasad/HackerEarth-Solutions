import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class App {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int cases = Integer.parseInt(br.readLine());
		for (int i = 0; i < cases; i++) {
			StringTokenizer tk = new StringTokenizer(br.readLine());
			int len = Integer.parseInt(tk.nextToken());
			int bre = Integer.parseInt(tk.nextToken());
			int[][] grid = new int[len][bre];
			for (int j = 0; j < len; j++) {
				String s = br.readLine();
				for (int k = 0; k < bre; k++) {
					if (s.charAt(k) == '.') {
						grid[j][k] = 1;
					} else {
						grid[j][k] = 0;
					}
				}
			}
			long[][] dyn = new long[len][bre];
			int row = 0;
			int col = 0;
			long mod = 1000000007;
			long[] sumRow = new long[len];
			long[] sumCol = new long[bre];
			for (int j = 0; j < len; j++) {
				for (int k = 0; k < bre; k++) {
					if (grid[j][k] == 0) {
						sumRow[j] = 0;
						sumCol[k] = 0;
						dyn[j][k] = 0;
						continue;
					}
					if (j == 0 && k == 0) {
						dyn[j][k] = 1;
						sumRow[j] = 1;
						sumCol[k] = 1;
						continue;
					}
					long res = 0;
					res = sumRow[j];
					res = (res + mod) % mod;
					res += sumCol[k];
					res = (res + mod) % mod;
					dyn[j][k] = res;
					sumRow[j] += res;
					sumCol[k] += res;
					sumRow[j] = (sumRow[j] + mod) % mod;
					sumCol[k] = (sumCol[k] + mod) % mod;

				}

			}

			System.out.println(dyn[dyn.length - 1][dyn[0].length - 1]);

		}
	}

	public static long count(long[][] dyn, int[][] grid, int i, int j) {
		if (i == grid.length - 1 && j == grid[0].length - 1) {
			return 1;
		}
		if (grid[i][j] == 0) {
			return 0;
		}
		if (dyn[i][j] != -1) {
			return dyn[i][j];
		}
		long res = 0;
		long mod = 1000000007;
		for (int k = i + 1; k < grid.length; k++) {
			if (grid[k][j] == 0) {
				break;
			}
			res += count(dyn, grid, k, j);
			res = (res + mod) % mod;
		}
		for (int k = j + 1; k < grid[0].length; k++) {
			if (grid[i][k] == 0) {
				break;
			}
			res += count(dyn, grid, i, k);
			res = (res + mod) % mod;
		}
		dyn[i][j] = res;
		return res;
	}

}